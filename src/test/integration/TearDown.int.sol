// SPDX-License-Identifier: BUSL-1.1
pragma solidity =0.8.16;

import {TwoAssetBasket} from "src/vaults/TwoAssetBasket.sol";
import {VaultV2} from "src/vaults/VaultV2.sol";
import {TestPlus} from "src/test/TestPlus.sol";
import {ERC20} from "solmate/src/tokens/ERC20.sol";

import {console2} from "forge-std/console2.sol";

contract BoostedEthPolygonTearDownTest is TestPlus {
    VaultV2 vault;
    ERC20 asset;

    function setUp() public {
        vm.createSelectFork("polygon", 51_364_628);

        vault = VaultV2(0xa92B1D196F0Df5F17215698f5de99eED26B659bF);
        governance = vault.governance();
        asset = ERC20(vault.asset());
    }

    function _upgrade() internal {
        VaultV2 impl = new VaultV2();
        vm.prank(governance);
        vault.upgradeTo(address(impl));
    }

    function testTearDown() public {
        _upgrade();
        vm.prank(governance);
        vault.pause();
        address[191] memory users = [
            0x90153be2aC32633fC9A7Cc53cdF01D348E875555,
            0x1688325FEf3B02143bA44880a43DccE339f004c0,
            0x00105F70bF0A2Dec987dbFC87A869c3090aBF6a0,
            0x9C2b62D894820bc65feE7ed395bc5cCCC2AF1035,
            0xEE9cA24FB62BFc021e1A46E09e1C1CbECD3341B5,
            0xdb575Fc2492e14140907ccC22A5AB0A6Be73F021,
            0x99BcEa6bB0403927fB3c038163478D5b42082Fd9,
            0x67675b745aE796C9599fd5e279b2821BE746cA65,
            0xe11E6558F36659FA3752819194Cf98Fa1727F8c3,
            0xd5f720568864B74d66a08C77b5c63c90F99eFd6F,
            0x2D5893F54C5743242836eE6EE8eDeb9bB2ebcAd6,
            0x676191F92508c652Ae10385Cf4127B41FE2F1DE7,
            0x059357632894Ee8139D3F09c3f13d01912eD81a8,
            0xa97E9BA560042d1141b344DBDBC5915aD9FBb88e,
            0x1982Ac6974D8722779120204036B1B951D551Bd6,
            0xA018eE9752d61c4Ca0A4503BFDc36BC15B504010,
            0xA996dcC9cE4b3333f5bbef87B64F4f2D2Ac90b29,
            0x8A3f6961F4894e41E37a27A4d9A2d3B73faC0CF5,
            0x958eB519904f3e65Da1F93b03637c83794EDa8C9,
            0xc83F2F6aA999c9bD63ecf6d0F1CA10E9CDF73b12,
            0xeE8513d68899384Fd0d56F1F04314A0604d9eD9B,
            0x5994Ac0DE5b8966EE74b0a67D4AFB9176FF9F772,
            0x3a19a6fFe74e56Ad6bFC2DD081831Ddd5dfD3BA9,
            0x72D9E73CF3D5fCEa0d104a2F1d2aC7625CfC087A,
            0x9B307c3DFD51a3723E7eAdE631359db0Aa04F28f,
            0x58bA15026605BD25d79D1EB2822DeD321d7796e1,
            0xEe7a35D1cccCe93174bBC14A66A1cb8b8aCe5578,
            0x765eB0d116860F50A058AcB63050961AeB55CFB5,
            0x4Ab01c59cccd4f0B62a6f7136C8E8811C9Ab4782,
            0xF08BaA6F0101D1865a55c10d824758785C9F6A88,
            0x976334ce735Ba1C33D2F87f02D00F13bb7366eDD,
            0x3F4032ad69b13D3B34A68411a0Bca8918353f4A5,
            0x62beE234b4066af4709DeE5FD3FFCed6782f5C0D,
            0x57f676a1f98b544B41476F1b0C1CAeef34f2f67e,
            0x4Fd556e95f3901e11a63F8d49D35a12Db577eD4B,
            0x91422B8BA0d4A92495056C0a663FfE2D202DdE0e,
            0xebC744EBD6A8849AdedD77196Cf1a8CeB86A26C9,
            0x6E49A2696E07091E757037d27eB8db7702071ABe,
            0x47649936dc49EBBbE8C2D87bB1543bFB25F9dc3d,
            0xF3D7459C7F6F75252AAdF594D2Ea74F04B359F82,
            0x2cD7001f9f658Ec784176BDC3289b13f138f7a52,
            0xD0307848c686e13899e9d5B75cAa2f9AAb850DAd,
            0xb73F394717b4a0524a19905B205E9ffF4a4B054a,
            0x4340C63aeC36FeFa738C374C4d8b833542E8fd06,
            0x7f8DAbe31259883F23131B763c42A69A67b66692,
            0xd64033B5BEA13493B616C3AE7Ad1b1D664A799a9,
            0x0A0aafA7aE3156cA0f1d9EC620c552A1586f3f7f,
            0xeD6c1002450cbf418E96d16361CbeD3a84366c43,
            0x140888e2D6E5CA8836CCbf8C1d92f2e8661E4E2f,
            0xd75a592D0A75756cAa438F69624d5b14Ec0Ad4b5,
            0x24FEA70dF0365CB59Df687dc0Ef724B3469EA9e1,
            0xE4c140a67A3A95913a6E2FcFc6d6434d94C07641,
            0x1CDA724B045367E914830ad66CBE4C8bB8954f83,
            0x47afa8560340DAc326be802abaCC72853F0503b5,
            0xb20465a24bFB2De5fb32229BEB6983c69EbFE866,
            0xdaf780714Ce4931f98129060445fC6Eb4Ab73bB1,
            0x465E8AA8e936B1Df9e04d227659249d83B6B7B00,
            0x4A23dbA0e3D1A42e7367905C0c21Da2DdA01e326,
            0x178B9cE98C24Fc5D4f648C36Ddab71550ACf2482,
            0x09DD11a5AB5A750d9Afc50E3110d2438F49C7F01,
            0x0b4585224b5BD3927e81c4529cFc5fF2e9c5784F,
            0x48cddC4602Ad1B30C25484F345e9288DeF388bDF,
            0x109b6aFDCB301Fcb24170504Dc315a865974E84b,
            0xBDBbB9935cB25D14FDC9494aa4f6ABF5A5E6AeF5,
            0x8038636C00Cd9E0B0159d5D27815683358B46E60,
            0x5572905d0c9Ae6387C0EbEa4F8f3CAFF501036B1,
            0xf34cA4d208ddCbce51ed5664Fa63654316c5F5A5,
            0xA113F995a1d0482A45E049b37edA05F7db12fC67,
            0xfdf3B3B1cfE5f4967DabA1719693d589Ba790c1c,
            0xAb05258f8CDc2e6Db32E30fB71DC3a47f44297E6,
            0x895e5C0795b0D87b8DEF2D70fFfe55C6A2755dF9,
            0xdd0206010CA82fF22303b58863b3a6f3006C86C4,
            0x553222B267bC978ACa3C28493AEf72d924b264BD,
            0xF4810d4F5F23D8e3cF9A65d5a588dedefBc71407,
            0x61A0659018b581D4217244B71C5AC8c4621Fa830,
            0xa7e999cFFE7E5c43Eb1c20Bac7c42b529F4f0031,
            0xC1a937A725583cA22353929C9C9ecDde3b0c70c2,
            0x9c421d817d620c80Cdbe65919d2441Ff3560A640,
            0x61A95082f763AD1C6D2891B66ff00De384918B15,
            0x2c3fdb0706F3F94d9491B3e18BCdA1C237093f99,
            0x3B869cd5db3e2D9dB6215a952e4baD04b9aD243c,
            0xb4e4CADC3B2342bA7ca7f7d7739bb9B841aEd249,
            0x66fd3f613B6e995c082e50ad008a2136ffcc7e63,
            0xFf65189D2c8F748D721Ce310c6CFf775BFa374f7,
            0xD2876A4456C89a57fCE5098027Bc38BA562E2063,
            0x36BFac3ec606960eD93Bc9f7236F649aea8F3D39,
            0x5784562572505c568f09b4c2a9cC62a77DbA1a2C,
            0xf2F5dA9a4Bc63F9aA77aC67f8Ca2700E8218dEB1,
            0x5B9e8bDD8B6EA310Fd16230EBc6c093E6A0FB562,
            0x5f7088bfeA305a458a5149789eBF50EDdF56a791,
            0x9aa3F4EDD79295B38B4E79B58856117C6A6Be289,
            0xc047AC8BF1aa561b2385d39E129Aad4c27ea9237,
            0xe5D71dDF0dD88F2D7eEcFE0A962f3DfE7023CF5C,
            0x74e487BE0AEaF3c9f3932FAE143A185253fF450F,
            0x737ED67E7D163Fd5e4EDc3249B30F9bF2B50C1B9,
            0xe38afD483278641CBf4e51B2A894A6b8827C82C1,
            0x7E89adc861ca2ea9a054d03bB09056aDE3ccE260,
            0x1bb216120E8F939f520C610Bdc3C88aDAc4b06f7,
            0xffECe9b2B53602b6409814716d43Cd74561d6324,
            0xF8791b6E1DAB4800F247fDfFD9C9d838AF0bEfbf,
            0x32A538D59CB0485f742e296F1F0B192823feA671,
            0xBC227884BA2c5a11bE60b05699d256014638983b,
            0x2c64a1D5D602E7Fb6d21dA6211DceCc6E17a0649,
            0x0FBeABcaFCf817d47E10a7bCFC15ba194dbD4EEF,
            0xB75bB243F4e5e1fb57bad6797AB426cdE8289C5d,
            0x0715C3329e38790C853F6fFD824f2771a02D37bf,
            0x573F74BB1658517CAD976C463b4978056909Ce82,
            0x73906B1199D86fD427850453adBDd2d6CB03E937,
            0xC6BC64Bc02A1CcDa9c3a563A3Db7BBdD9AB9812c,
            0xc0f8f0b91e4cACE6d460E2eFc8794e744aBE5E6D,
            0x7D668f97bc8C1d95Ff23706a62B27b7F09d33d1e,
            0xd0B8809579D83Be1de9B655677B5278240688BA4,
            0x4b2E3F09cc773957895f83A5c828C143CbEcbb72,
            0x9BF92F28A9b8Aa9832C8A46a69823B5530BEF128,
            0xC6e50c201e5CE3F805AeFe298311b504De091340,
            0x0aAF37c3EaaA42d417434Fd2ceC555846D46415C,
            0xBFE5b2A3846dBFa3dA11aC2EEb108F3685725B56,
            0x5f20a0eE72Cab0162479874316fE6c199a0D5b67,
            0xEF8F0d7684D4405B5c51AEF023675946D5992b29,
            0x95A2061B1B8f79232B7c15993cDCf942c6cadd60,
            0xff18311CcDBe86E54d266f07EAEc2668BeE9f9f3,
            0x623B0D0fe0Fcb1B4376C704827ffA7d657924332,
            0x899B2d61a5943Dd2452cbc9Ff5d158c63a2275dd,
            0x4fcEb5658e54412172bC9080DCb955d05Ae53737,
            0x74e03426D2835444Bd6756D683024e1B91AF7be7,
            0x50FBA4c771bDE076A8A85550AeaeD3657EA44f33,
            0xDA5f0A4DFA505dfD8391BF1a5c655295930cEcf4,
            0xD6A93076fBEB28F2785874a60D82222331231C01,
            0x4cB75146e98562C9d79b31649C6C739e4DCB7CD5,
            0x147C0E259f50609c0Bd71C6190efd3faAD45B287,
            0x52a6C3AD70b4b0bEf56acc549d59C382B75C4f26,
            0x919C397950cE2eDACC0CD5293e1b9b753E644265,
            0x87A9756D8eEB60E662b87DA5B895762274395c73,
            0x9342174252e8aE1De46AbEfc1b930E21a3CbCF55,
            0x55DD7D8Db617E34c37b43DB2e1Ef154e2558c6Df,
            0xE28970C7c73b4C2ef8BC15238b8b44AD40CEbF3D,
            0xdD83eaa1A66369AB09B2642a1A130287c4aD8e40,
            0x09ca2AAECD1f8ef5ecd25caf8722046427978C7e,
            0x02644E345b23767c8103Dda301aA11CAFd82b71e,
            0xdc956B7135AA7a99F8080e54dEf4148f8e54bCa4,
            0x37f5E5aaBC23E9891c33Bf128D6D2E0557225997,
            0x792Dbaae73d352586cE0C187cC8Cb1A38e12f278,
            0xe3387E27440D1Ca7E8A8E789e8372C3F274625EE,
            0xcB726F13479963934E91b6F34b6E87eC69c21bB9,
            0xaeF8a2854BA81729ea9cACf03d84555C72A67E87,
            0xEA4C988B5c56a1898c50797478097B1CB83Cbce7,
            0xe2042F3611FF44d1047f4539eBF215A220c9F779,
            0x4480659d833975a70619AC0633360d0336153Df9,
            0x00409fC839a2Ec2e6d12305423d37Cd011279C09,
            0x457244a384d08b781B40087923748DB6545Bb7d9,
            0x3844597c2b75E8510d8895173adDC28dd995fA45,
            0x3A62Da7ACe99b4d3dFBCc9A947103aE13a214d48,
            0x64349BC61d02C07E2f6E51BE6d2d6BBe9681f32e,
            0xE451DC0948F33B1261c585f0DB84cca9Ab69F3A4,
            0x7D9d0DA1Ad30d4a707A473C9e91ecc100Ff065ef,
            0x3367A005c2bEf54f2836a616ce3E4Fa2d35910da,
            0xBe13084Cea1e3C8615f781b85B995c4d95947080,
            0x411d209E4874E00Dd550de43190224515b28fAFe,
            0xAD2161e515323681D1500FEe01015ef681ed9675,
            0xB1aBD733F367137667460Eb821989BEB77d60939,
            0x49d1978DCe1a788A0e33Ac59C004e5fEe4093e95,
            0x8bDDAC3772f37B85e8c4b314AFaDa0bc7a79b5Ca,
            0xd7a43D3536773521d5761F749e9e04708f061f3D,
            0xdd9c5568D1737B1A646940c9B9d80DCF9C6bA248,
            0x22e2f326FE5A1d07E1214EB1C08346Fd816E8375,
            0xf5Fa0f11364Cc7695c2E8c3F7C9a7dE3EA2483f1,
            0x38D1a652Fc7661eE44315da12aeDFB2fD57E7b00,
            0xBB60c89e3765e8180631798053Dd9904498B86D9,
            0x023336f9c9f2873fC9bdaD98debFc10f82116d05,
            0xF5B8FD757B2Dbc50e707f206763c9AF0a92F1BAB,
            0x470D235cA1CafF614AbEE02D98Ac3aa89A6758bD,
            0x90e06d2d9705c181Bad2A4e7c3DcA13631a6f479,
            0xD923dE646D3f0BB9Eb7f9169f259C79C3edE2188,
            0x28E006A428CEf1864554341777108a097859eA5a,
            0x8F954de70420a52E4299d9FCA310452EE8c7ff32,
            0xE7691BA06eB4a302652d3290e4A89A504b3860fC,
            0x360aE6362e8D3BF24cC677d275cFD976D17348F4,
            0x08d0aF31F39E80b60046D1A08e9d3e31F30216Ee,
            0x396F0e55fA33513441d556f84a6eA5c6Fd7d217B,
            0x156712b8F4BE2151d2213c790b1E44b9c6a259b7,
            0xFEB37531c44701c48FA9DD4256DC0f97c9568Cb9,
            0x50e205d312df4CAF9C2Feea2e13c673724B35C6e,
            0x92B886d05c30677F1F596F35e8099B79fdd670Db,
            0xEB04ee956b3aa60977542e084E38c60BE7FD69A5,
            0x9ec652154528CB076DA2842b463B3263f3F1a003,
            0x49F63B254EA9043E57678C13E06Aef257fab45C1,
            0x39067000aFFe427e3296DA67dB3Fb6038CA0E8dB,
            0xe9c3Ba9c7009A82D78E081543461C88D4E7bD1C3,
            0x9176CD1B192cd7eD3bcd773B1f6e2e39be4bCbc4,
            0x793625d47087D55f1F1F29eb94d589C199A1D128,
            0xB25CD9449aFed2Fb8bD55657B7040ce15465E6fe
        ];

        bytes memory data;

        uint256[] memory oldAssets = new uint256[](users.length);
        uint256[] memory shouldReceive = new uint256[](users.length);

        uint256 price = vault.detailedPrice().num;
        uint256 priceDecimals = vault.detailedPrice().decimals;

        uint256 count = 0;

        for (uint256 i = 0; i < users.length; i++) {
            oldAssets[i] = asset.balanceOf(users[i]);
            shouldReceive[i] = vault.balanceOf(users[i]) * price * (10 ** asset.decimals());
            shouldReceive[i] /= ((10 ** vault.decimals()) * (10 ** priceDecimals));

            if (shouldReceive[i] > 1e15) {
                data = bytes.concat(data, abi.encodePacked(users[i]));
                count++;
            }
        }
        vm.prank(governance);
        vault.tearDown(data);

        console2.log("vault tvl %s %s %s", vault.detailedTVL().num, vault.detailedTVL().decimals, count);

        for (uint256 i = 0; i < users.length; i++) {
            if (shouldReceive[i] > 1e15) {
                assertApproxEqRel(shouldReceive[i], asset.balanceOf(users[i]) - oldAssets[i], 0.1e18);
                assertTrue(vault.balanceOf(users[i]) == 0);
            }
        }
    }
}
