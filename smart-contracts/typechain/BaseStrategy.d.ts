/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BaseStrategyInterface extends ethers.utils.Interface {
  functions: {
    "debtThreshold()": FunctionFragment;
    "estimatedTotalAssets()": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestTrigger(uint256)": FunctionFragment;
    "keeper()": FunctionFragment;
    "maxReportDelay()": FunctionFragment;
    "minReportDelay()": FunctionFragment;
    "name()": FunctionFragment;
    "nativeToWant(uint256)": FunctionFragment;
    "profitFactor()": FunctionFragment;
    "setDebtThreshold(uint256)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setMaxReportDelay(uint256)": FunctionFragment;
    "setMinReportDelay(uint256)": FunctionFragment;
    "setProfitFactor(uint256)": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "tend()": FunctionFragment;
    "tendTrigger(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "want()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "debtThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxReportDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minReportDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeToWant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "profitFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDebtThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setKeeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMaxReportDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReportDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sweep", values: [string]): string;
  encodeFunctionData(functionFragment: "tend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tendTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "debtThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeToWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDebtThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tendTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Harvested(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdatedDebtThreshold(uint256)": EventFragment;
    "UpdatedKeeper(address)": EventFragment;
    "UpdatedMaxReportDelay(uint256)": EventFragment;
    "UpdatedMinReportDelay(uint256)": EventFragment;
    "UpdatedProfitFactor(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Harvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedDebtThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxReportDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMinReportDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedProfitFactor"): EventFragment;
}

export class BaseStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BaseStrategyInterface;

  functions: {
    debtThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    maxReportDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minReportDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nativeToWant(
      _amtInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    profitFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tendTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestTrigger(
    callCostInWei: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

  minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nativeToWant(
    _amtInWei: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

  setDebtThreshold(
    _debtThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxReportDelay(
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinReportDelay(
    _delay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProfitFactor(
    _profitFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweep(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tend(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tendTrigger(
    callCostInWei: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amountNeeded: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvestTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nativeToWant(
      _amtInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweep(_token: string, overrides?: CallOverrides): Promise<void>;

    tend(overrides?: CallOverrides): Promise<void>;

    tendTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Harvested(
      profit?: null,
      loss?: null,
      debtPayment?: null,
      debtOutstanding?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        profit: BigNumber;
        loss: BigNumber;
        debtPayment: BigNumber;
        debtOutstanding: BigNumber;
      }
    >;

    UpdatedDebtThreshold(
      debtThreshold?: null
    ): TypedEventFilter<[BigNumber], { debtThreshold: BigNumber }>;

    UpdatedKeeper(
      newKeeper?: null
    ): TypedEventFilter<[string], { newKeeper: string }>;

    UpdatedMaxReportDelay(
      delay?: null
    ): TypedEventFilter<[BigNumber], { delay: BigNumber }>;

    UpdatedMinReportDelay(
      delay?: null
    ): TypedEventFilter<[BigNumber], { delay: BigNumber }>;

    UpdatedProfitFactor(
      profitFactor?: null
    ): TypedEventFilter<[BigNumber], { profitFactor: BigNumber }>;
  };

  estimateGas: {
    debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nativeToWant(
      _amtInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tendTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    debtThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimatedTotalAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReportDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minReportDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nativeToWant(
      _amtInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    profitFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDebtThreshold(
      _debtThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinReportDelay(
      _delay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProfitFactor(
      _profitFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tendTrigger(
      callCostInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amountNeeded: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
