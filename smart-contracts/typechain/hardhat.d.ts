/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "StrategyAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StrategyAPI__factory>;
    getContractFactory(
      name: "VaultAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAPI__factory>;
    getContractFactory(
      name: "BaseVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseVault__factory>;
    getContractFactory(
      name: "FxStateRootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxStateRootTunnel__factory>;
    getContractFactory(
      name: "L1Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L1Vault__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IInitializableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableAToken__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolDataProvider__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "IUniLikeSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniLikeSwapRouter__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "FxStateChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxStateChildTunnel__factory>;
    getContractFactory(
      name: "L2AAVEStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2AAVEStrategy__factory>;
    getContractFactory(
      name: "L2Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2Vault__factory>;
    getContractFactory(
      name: "TestMintable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestMintable__factory>;
    getContractFactory(
      name: "TestStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestStrategy__factory>;
    getContractFactory(
      name: "TokenAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenAPI__factory>;
    getContractFactory(
      name: "VaultAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VaultAPI__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "FxBaseChildTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseChildTunnel__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "FxBaseRootTunnel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxBaseRootTunnel__factory>;
    getContractFactory(
      name: "ICheckpointManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICheckpointManager__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
  }
}
