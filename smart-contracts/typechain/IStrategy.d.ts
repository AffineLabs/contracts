/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IStrategyInterface extends ethers.utils.Interface {
  functions: {
    "apiVersion()": FunctionFragment;
    "delegatedAssets()": FunctionFragment;
    "estimatedTotalAssets()": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestTrigger(uint256)": FunctionFragment;
    "isActive()": FunctionFragment;
    "keeper()": FunctionFragment;
    "name()": FunctionFragment;
    "tend()": FunctionFragment;
    "tendTrigger(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "want()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "apiVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "tend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tendTrigger",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "apiVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegatedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tendTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class IStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStrategyInterface;

  functions: {
    apiVersion(overrides?: CallOverrides): Promise<[string]>;

    delegatedAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  apiVersion(overrides?: CallOverrides): Promise<string>;

  delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvestTrigger(
    callCost: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  tend(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tendTrigger(
    callCost: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    apiVersion(overrides?: CallOverrides): Promise<string>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    tend(overrides?: CallOverrides): Promise<void>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    withdraw(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    apiVersion(overrides?: CallOverrides): Promise<BigNumber>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    apiVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegatedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimatedTotalAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvestTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tend(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tendTrigger(
      callCost: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
