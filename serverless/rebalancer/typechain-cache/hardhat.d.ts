/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BaseRelayRecipient__factory>;
    getContractFactory(
      name: "IRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IRelayRecipient__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "MinimalForwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MinimalForwarder__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3PoolErrors__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "IERC721Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC721Permit__factory>;
    getContractFactory(
      name: "INonfungiblePositionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.INonfungiblePositionManager__factory>;
    getContractFactory(
      name: "IPeripheryImmutableState",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPeripheryImmutableState__factory>;
    getContractFactory(
      name: "IPeripheryPayments",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPeripheryPayments__factory>;
    getContractFactory(
      name: "IPoolInitializer",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IPoolInitializer__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Multicallable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "AffineGovernable",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AffineGovernable__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "BaseVault",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BaseVault__factory>;
    getContractFactory(
      name: "BridgeEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.BridgeEscrow__factory>;
    getContractFactory(
      name: "DeltaNeutralLp",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DeltaNeutralLp__factory>;
    getContractFactory(
      name: "ConvexStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ConvexStrategy__factory>;
    getContractFactory(
      name: "CurveStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.CurveStrategy__factory>;
    getContractFactory(
      name: "L1BridgeEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L1BridgeEscrow__factory>;
    getContractFactory(
      name: "L1CompoundStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L1CompoundStrategy__factory>;
    getContractFactory(
      name: "L1Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L1Vault__factory>;
    getContractFactory(
      name: "L1WormholeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L1WormholeRouter__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IInitializableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IInitializableAToken__factory>;
    getContractFactory(
      name: "ILendingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILendingPool__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILendingPoolAddressesProvider__factory>;
    getContractFactory(
      name: "ILendingPoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "IProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IProtocolDataProvider__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "IComptroller",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IComptroller__factory>;
    getContractFactory(
      name: "ICToken",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICToken__factory>;
    getContractFactory(
      name: "IConvexBooster",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IConvexBooster__factory>;
    getContractFactory(
      name: "IConvexRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IConvexRewards__factory>;
    getContractFactory(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "ILiquidityGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ILiquidityGauge__factory>;
    getContractFactory(
      name: "I3CrvMetaPoolZap",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.I3CrvMetaPoolZap__factory>;
    getContractFactory(
      name: "IMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMinter__factory>;
    getContractFactory(
      name: "ICREATE3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ICREATE3Factory__factory>;
    getContractFactory(
      name: "IERC4626",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IERC4626__factory>;
    getContractFactory(
      name: "IRootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IRootChainManager__factory>;
    getContractFactory(
      name: "IUniPositionValue",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IUniPositionValue__factory>;
    getContractFactory(
      name: "IWormhole",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IWormhole__factory>;
    getContractFactory(
      name: "IMasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IMasterChef__factory>;
    getContractFactory(
      name: "DeltaNeutralLpV3",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DeltaNeutralLpV3__factory>;
    getContractFactory(
      name: "DetailedShare",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.DetailedShare__factory>;
    getContractFactory(
      name: "EmergencyWithdrawalQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.EmergencyWithdrawalQueue__factory>;
    getContractFactory(
      name: "ERC4626Router",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC4626Router__factory>;
    getContractFactory(
      name: "ERC4626RouterBase",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.ERC4626RouterBase__factory>;
    getContractFactory(
      name: "Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Forwarder__factory>;
    getContractFactory(
      name: "L2AAVEStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L2AAVEStrategy__factory>;
    getContractFactory(
      name: "IChildERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.IChildERC20__factory>;
    getContractFactory(
      name: "L2BridgeEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L2BridgeEscrow__factory>;
    getContractFactory(
      name: "L2Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L2Vault__factory>;
    getContractFactory(
      name: "L2WormholeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.L2WormholeRouter__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "TwoAssetBasket",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.TwoAssetBasket__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "WormholeRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions,
    ): Promise<Contracts.WormholeRouter__factory>;

    getContractAt(
      name: "BaseRelayRecipient",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.BaseRelayRecipient>;
    getContractAt(name: "IRelayRecipient", address: string, signer?: ethers.Signer): Promise<Contracts.IRelayRecipient>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(name: "Initializable", address: string, signer?: ethers.Signer): Promise<Contracts.Initializable>;
    getContractAt(name: "UUPSUpgradeable", address: string, signer?: ethers.Signer): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(name: "AccessControl", address: string, signer?: ethers.Signer): Promise<Contracts.AccessControl>;
    getContractAt(name: "IAccessControl", address: string, signer?: ethers.Signer): Promise<Contracts.IAccessControl>;
    getContractAt(name: "Ownable", address: string, signer?: ethers.Signer): Promise<Contracts.Ownable>;
    getContractAt(
      name: "MinimalForwarder",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.MinimalForwarder>;
    getContractAt(name: "ERC20", address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(name: "IERC20Permit", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Permit>;
    getContractAt(name: "IERC20Metadata", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Metadata>;
    getContractAt(name: "IERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(name: "IERC721Metadata", address: string, signer?: ethers.Signer): Promise<Contracts.IERC721Metadata>;
    getContractAt(name: "IERC721", address: string, signer?: ethers.Signer): Promise<Contracts.IERC721>;
    getContractAt(name: "ERC165", address: string, signer?: ethers.Signer): Promise<Contracts.ERC165>;
    getContractAt(name: "IERC165", address: string, signer?: ethers.Signer): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(name: "IUniswapV3Pool", address: string, signer?: ethers.Signer): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolErrors",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3PoolErrors>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(name: "IERC721Permit", address: string, signer?: ethers.Signer): Promise<Contracts.IERC721Permit>;
    getContractAt(
      name: "INonfungiblePositionManager",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.INonfungiblePositionManager>;
    getContractAt(
      name: "IPeripheryImmutableState",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPeripheryImmutableState>;
    getContractAt(
      name: "IPeripheryPayments",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPeripheryPayments>;
    getContractAt(
      name: "IPoolInitializer",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IPoolInitializer>;
    getContractAt(name: "ISwapRouter", address: string, signer?: ethers.Signer): Promise<Contracts.ISwapRouter>;
    getContractAt(name: "Multicallable", address: string, signer?: ethers.Signer): Promise<Contracts.Multicallable>;
    getContractAt(name: "ERC20", address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(
      name: "AffineGovernable",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AffineGovernable>;
    getContractAt(name: "BaseStrategy", address: string, signer?: ethers.Signer): Promise<Contracts.BaseStrategy>;
    getContractAt(name: "BaseVault", address: string, signer?: ethers.Signer): Promise<Contracts.BaseVault>;
    getContractAt(name: "BridgeEscrow", address: string, signer?: ethers.Signer): Promise<Contracts.BridgeEscrow>;
    getContractAt(name: "DeltaNeutralLp", address: string, signer?: ethers.Signer): Promise<Contracts.DeltaNeutralLp>;
    getContractAt(name: "ConvexStrategy", address: string, signer?: ethers.Signer): Promise<Contracts.ConvexStrategy>;
    getContractAt(name: "CurveStrategy", address: string, signer?: ethers.Signer): Promise<Contracts.CurveStrategy>;
    getContractAt(name: "L1BridgeEscrow", address: string, signer?: ethers.Signer): Promise<Contracts.L1BridgeEscrow>;
    getContractAt(
      name: "L1CompoundStrategy",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.L1CompoundStrategy>;
    getContractAt(name: "L1Vault", address: string, signer?: ethers.Signer): Promise<Contracts.L1Vault>;
    getContractAt(
      name: "L1WormholeRouter",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.L1WormholeRouter>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(name: "IAToken", address: string, signer?: ethers.Signer): Promise<Contracts.IAToken>;
    getContractAt(
      name: "IInitializableAToken",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IInitializableAToken>;
    getContractAt(name: "ILendingPool", address: string, signer?: ethers.Signer): Promise<Contracts.ILendingPool>;
    getContractAt(
      name: "ILendingPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILendingPoolAddressesProvider>;
    getContractAt(
      name: "ILendingPoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ILendingPoolAddressesProviderRegistry>;
    getContractAt(
      name: "IProtocolDataProvider",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IProtocolDataProvider>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(name: "IComptroller", address: string, signer?: ethers.Signer): Promise<Contracts.IComptroller>;
    getContractAt(name: "ICToken", address: string, signer?: ethers.Signer): Promise<Contracts.ICToken>;
    getContractAt(name: "IConvexBooster", address: string, signer?: ethers.Signer): Promise<Contracts.IConvexBooster>;
    getContractAt(name: "IConvexRewards", address: string, signer?: ethers.Signer): Promise<Contracts.IConvexRewards>;
    getContractAt(name: "ICurvePool", address: string, signer?: ethers.Signer): Promise<Contracts.ICurvePool>;
    getContractAt(name: "ILiquidityGauge", address: string, signer?: ethers.Signer): Promise<Contracts.ILiquidityGauge>;
    getContractAt(
      name: "I3CrvMetaPoolZap",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.I3CrvMetaPoolZap>;
    getContractAt(name: "IMinter", address: string, signer?: ethers.Signer): Promise<Contracts.IMinter>;
    getContractAt(name: "ICREATE3Factory", address: string, signer?: ethers.Signer): Promise<Contracts.ICREATE3Factory>;
    getContractAt(name: "IERC4626", address: string, signer?: ethers.Signer): Promise<Contracts.IERC4626>;
    getContractAt(
      name: "IRootChainManager",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IRootChainManager>;
    getContractAt(
      name: "IUniPositionValue",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.IUniPositionValue>;
    getContractAt(name: "IWormhole", address: string, signer?: ethers.Signer): Promise<Contracts.IWormhole>;
    getContractAt(name: "IMasterChef", address: string, signer?: ethers.Signer): Promise<Contracts.IMasterChef>;
    getContractAt(
      name: "DeltaNeutralLpV3",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.DeltaNeutralLpV3>;
    getContractAt(name: "DetailedShare", address: string, signer?: ethers.Signer): Promise<Contracts.DetailedShare>;
    getContractAt(
      name: "EmergencyWithdrawalQueue",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.EmergencyWithdrawalQueue>;
    getContractAt(name: "ERC4626Router", address: string, signer?: ethers.Signer): Promise<Contracts.ERC4626Router>;
    getContractAt(
      name: "ERC4626RouterBase",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.ERC4626RouterBase>;
    getContractAt(name: "Forwarder", address: string, signer?: ethers.Signer): Promise<Contracts.Forwarder>;
    getContractAt(name: "L2AAVEStrategy", address: string, signer?: ethers.Signer): Promise<Contracts.L2AAVEStrategy>;
    getContractAt(name: "IChildERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IChildERC20>;
    getContractAt(name: "L2BridgeEscrow", address: string, signer?: ethers.Signer): Promise<Contracts.L2BridgeEscrow>;
    getContractAt(name: "L2Vault", address: string, signer?: ethers.Signer): Promise<Contracts.L2Vault>;
    getContractAt(
      name: "L2WormholeRouter",
      address: string,
      signer?: ethers.Signer,
    ): Promise<Contracts.L2WormholeRouter>;
    getContractAt(name: "Router", address: string, signer?: ethers.Signer): Promise<Contracts.Router>;
    getContractAt(name: "TwoAssetBasket", address: string, signer?: ethers.Signer): Promise<Contracts.TwoAssetBasket>;
    getContractAt(name: "MockERC20", address: string, signer?: ethers.Signer): Promise<Contracts.MockERC20>;
    getContractAt(name: "WormholeRouter", address: string, signer?: ethers.Signer): Promise<Contracts.WormholeRouter>;

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer,
    ): Promise<ethers.ContractFactory>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
  }
}
