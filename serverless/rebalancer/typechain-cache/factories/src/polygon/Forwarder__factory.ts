/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Forwarder,
  ForwarderInterface,
} from "../../../src/polygon/Forwarder";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MinimalForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MinimalForwarder.ForwardRequest[]",
        name: "requests",
        type: "tuple[]",
      },
      {
        internalType: "bytes",
        name: "signatures",
        type: "bytes",
      },
    ],
    name: "executeBatch",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct MinimalForwarder.ForwardRequest",
        name: "req",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61014060405234801561001157600080fd5b50604080518082018252601081526f26b4b734b6b0b62337b93bb0b93232b960811b602080830191825283518085019094526005845264302e302e3160d81b908401528151902060e08190527fae209a0b48f21c054280f2455d32cf309387644879d9acbd8ffc1991638118856101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6100fb8184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c052610120525061011092505050565b60805160a05160c05160e0516101005161012051610f6e61015f60003960006106e4015260006107330152600061070e0152600061066701526000610691015260006106bb0152610f6e6000f3fe60806040526004361061003f5760003560e01c80632d0335ab1461004457806347153f821461009a578063bf5d3bdb146100bb578063cef3cd25146100eb575b600080fd5b34801561005057600080fd5b5061008761005f366004610b35565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6040519081526020015b60405180910390f35b6100ad6100a8366004610bb4565b610100565b604051610091929190610c49565b3480156100c757600080fd5b506100db6100d6366004610bb4565b610303565b6040519015158152602001610091565b6100fe6100f9366004610ca3565b6104c2565b005b6000606061010f858585610303565b6101a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4d696e696d616c466f727761726465723a207369676e617475726520646f657360448201527f206e6f74206d617463682072657175657374000000000000000000000000000060648201526084015b60405180910390fd5b6101af60808601356001610d3d565b6000806101bf6020890189610b35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000808660200160208101906102139190610b35565b73ffffffffffffffffffffffffffffffffffffffff166060880135604089013561024060a08b018b610d77565b61024d60208d018d610b35565b60405160200161025f93929190610ddc565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261029791610e15565b600060405180830381858888f193505050503d80600081146102d5576040519150601f19603f3d011682016040523d82523d6000602084013e6102da565b606091505b5090925090506102ef603f6060890135610e31565b5a116102f757fe5b90969095509350505050565b60008061042384848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061041d92507fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e489150610373905060208a018a610b35565b61038360408b0160208c01610b35565b60408b013560608c013560808d013561039f60a08f018f610d77565b6040516103ad929190610e6c565b60408051918290038220602083019890985273ffffffffffffffffffffffffffffffffffffffff96871690820152949093166060850152608084019190915260a083015260c082015260e081019190915261010001604051602081830303815290604052805190602001206105ba565b90610629565b9050608085013560008061043a6020890189610b35565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156104b9575061048a6020860186610b35565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b95945050505050565b60006041815b858110156105b157368787838181106104e3576104e3610e7c565b90506020028101906104f59190610eab565b90503660006105068587898b610edf565b9092509050610516604187610d3d565b9550610523604186610d3d565b94506000610532848484610100565b5090508061059c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4677643a2063616c6c206661696c6564000000000000000000000000000000006044820152606401610197565b505050506105aa8160010190565b90506104c8565b50505050505050565b60006106236105c761064d565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b60008060006106388585610781565b91509150610645816107c6565b509392505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480156106b357507f000000000000000000000000000000000000000000000000000000000000000046145b156106dd57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b60008082516041036107b75760208301516040840151606085015160001a6107ab87828585610a1d565b945094505050506107bf565b506000905060025b9250929050565b60008160048111156107da576107da610f09565b036107e25750565b60018160048111156107f6576107f6610f09565b0361085d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610197565b600281600481111561087157610871610f09565b036108d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610197565b60038160048111156108ec576108ec610f09565b03610979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610197565b600481600481111561098d5761098d610f09565b03610a1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610197565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610a545750600090506003610b2c565b8460ff16601b14158015610a6c57508460ff16601c14155b15610a7d5750600090506004610b2c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610ad1573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610b2557600060019250925050610b2c565b9150600090505b94509492505050565b600060208284031215610b4757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b6b57600080fd5b9392505050565b60008083601f840112610b8457600080fd5b50813567ffffffffffffffff811115610b9c57600080fd5b6020830191508360208285010111156107bf57600080fd5b600080600060408486031215610bc957600080fd5b833567ffffffffffffffff80821115610be157600080fd5b9085019060c08288031215610bf557600080fd5b90935060208501359080821115610c0b57600080fd5b50610c1886828701610b72565b9497909650939450505050565b60005b83811015610c40578181015183820152602001610c28565b50506000910152565b82151581526040602082015260008251806040840152610c70816060850160208701610c25565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b60008060008060408587031215610cb957600080fd5b843567ffffffffffffffff80821115610cd157600080fd5b818701915087601f830112610ce557600080fd5b813581811115610cf457600080fd5b8860208260051b8501011115610d0957600080fd5b602092830196509450908601359080821115610d2457600080fd5b50610d3187828801610b72565b95989497509550505050565b80820180821115610623577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610dac57600080fd5b83018035915067ffffffffffffffff821115610dc757600080fd5b6020019150368190038213156107bf57600080fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b60008251610e27818460208701610c25565b9190910192915050565b600082610e67577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8183823760009101908152919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112610e2757600080fd5b60008085851115610eef57600080fd5b83861115610efc57600080fd5b5050820193919092039150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea264697066735822122063cc312362b51240bd981fd42b6f6cf193ed958bfa2513d684db4e2257c74f3264736f6c63430008100033";

type ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Forwarder__factory extends ContractFactory {
  constructor(...args: ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Forwarder> {
    return super.deploy(overrides || {}) as Promise<Forwarder>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Forwarder {
    return super.attach(address) as Forwarder;
  }
  override connect(signer: Signer): Forwarder__factory {
    return super.connect(signer) as Forwarder__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForwarderInterface {
    return new utils.Interface(_abi) as ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Forwarder {
    return new Contract(address, _abi, signerOrProvider) as Forwarder;
  }
}
