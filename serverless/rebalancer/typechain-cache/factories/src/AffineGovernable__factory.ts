/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AffineGovernable,
  AffineGovernableInterface,
} from "../../src/AffineGovernable";

const _abi = [
  {
    inputs: [],
    name: "governance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060ab8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635aa6e67514602d575b600080fd5b600054604c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea2646970667358221220500a2c693f2a2f9c41093c5efde0217a23b35e2ebf431b4162e11db281a0a35664736f6c63430008100033";

type AffineGovernableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AffineGovernableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AffineGovernable__factory extends ContractFactory {
  constructor(...args: AffineGovernableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AffineGovernable> {
    return super.deploy(overrides || {}) as Promise<AffineGovernable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AffineGovernable {
    return super.attach(address) as AffineGovernable;
  }
  override connect(signer: Signer): AffineGovernable__factory {
    return super.connect(signer) as AffineGovernable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AffineGovernableInterface {
    return new utils.Interface(_abi) as AffineGovernableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AffineGovernable {
    return new Contract(address, _abi, signerOrProvider) as AffineGovernable;
  }
}
